/**
 * {{.ModuleTitle}}-服务层
 * @author {{.Author}}
 * @date {{.Date}}
 * @moduleName : {{.ModuleName}}
 */

package service

import (
	"go_study/src/common"
	"go_study/src/sys/code_generation/entity"
)

type {{.ModuleName}}Service struct {
   common.BaseService
   {{toLowerFirst .ModuleName}}Dao *dao.{{.ModuleName}}Dao
}

var {{.ModuleName}}Service *{{.ModuleName}}Service

// New{{.ModuleName}}Service 做成单实列
func New{{.ModuleName}}Service() *{{.ModuleName}}Service {
    if {{toLowerFirst .ModuleName}}Service == nil {
        {{.ModuleName}}Service = &{{.ModuleName}}Service{
            {{toLowerFirst .ModuleName}}Dao: dao.New{{.ModuleName}}Dao(),
        }
    }
    return {{toLowerFirst .ModuleName}}Service
}

// Add{{.ModuleName}} 添加{{.ModuleTitle}}数据
func (s *{{.ModuleName}}Service) Add{{.ModuleName}}(entity entity.{{.ModuleName}}) (int64, error) {
    tx := New{{.ModuleName}}Service().{{.ModuleName}}Dao.Add{{.ModuleName}}(entity)
    return tx.RowsAffected, tx.Error
}

// Drop{{.ModuleName}}ByIds 根据ID切片删除{{.ModuleTitle}}数据
func (s *{{.ModuleName}}Service) Drop{{.ModuleName}}ByIds(ids []int64) (int64, error) {
    tx := New{{.ModuleName}}Service().{{.ModuleName}}Dao.Drop{{.ModuleName}}ByIds(ids)
    return tx.RowsAffected, tx.Error
}

// Update{{.ModuleName}}ById 根据ID更新{{.ModuleTitle}}数据
func (s *{{.ModuleName}}Service) Update{{.ModuleName}}ById(entity entity.{{.ModuleName}}) (int64, error) {
    tx := New{{.ModuleName}}Service().{{.ModuleName}}Dao.Update{{.ModuleName}}ById(entity)
    return tx.RowsAffected, tx.Error
}

// Query{{.ModuleName}}Page 分页查询{{.ModuleTitle}}数据
func (s *{{.ModuleName}}Service) Query{{.ModuleName}}Page(page common.Page) ([]entity.{{.ModuleName}}, int64, error) {
    data,count,err := New{{.ModuleName}}Service().{{.ModuleName}}Dao.Query{{.ModuleName}}Page(entity, page)
    return data,count,err
}

