import { v as defineComponent, cp as useColorMode, a$ as ref, a1 as computed, aZ as reactive, cq as useElementBounding, aP as onMounted, n as nextTick, bz as watchEffect, aU as onUnmounted, o as openBlock, e as createElementBlock, z as unref, g as createCommentVNode, x as createBaseVNode } from './index-55dde797.js';

const _hoisted_1 = {
  key: 0,
  absolute: "",
  "inset-0": "",
  flex: "",
  "items-center": "",
  "justify-center": ""
};
const _hoisted_2 = /* @__PURE__ */ createBaseVNode("i", { class: "mdi:loading animate-spin text-3xl" }, null, -1);
const _hoisted_3 = [
  _hoisted_2
];
const iframeCacheMap = /* @__PURE__ */ new Map();
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "IframeView",
  props: {
    src: {}
  },
  setup(__props) {
    const props = __props;
    const colorMode = useColorMode();
    const anchor = ref();
    const key = computed(() => props.src);
    const iframeEl = ref();
    const box = reactive(useElementBounding(anchor));
    const iframeLoaded = ref(false);
    onMounted(() => {
      if (iframeCacheMap.get(key.value)) {
        iframeEl.value = iframeCacheMap.get(key.value);
        iframeEl.value.style.visibility = "visible";
      } else {
        iframeEl.value = document.createElement("iframe");
        iframeCacheMap.set(key.value, iframeEl.value);
        iframeEl.value.src = props.src;
        try {
          iframeEl.value.style.opacity = "0.01";
          iframeEl.value.onload = () => {
            syncColorMode();
            iframeEl.value.style.opacity = "1";
            iframeLoaded.value = true;
          };
        } catch (e) {
          iframeEl.value.style.opacity = "1";
        }
        document.body.appendChild(iframeEl.value);
        nextTick(updateIframeBox);
      }
      setTimeout(syncColorMode, 100);
    });
    watchEffect(updateIframeBox);
    watchEffect(syncColorMode);
    onUnmounted(() => {
      if (iframeEl.value) {
        iframeEl.value.style.visibility = "hidden";
        iframeLoaded.value = false;
      }
    });
    function syncColorMode() {
      if (!iframeEl.value || !iframeEl.value.contentWindow)
        return;
      try {
        const html = iframeEl.value.contentWindow.document.querySelector("html");
        html?.classList.toggle("dark", colorMode.value === "dark");
        html?.classList.toggle("light", colorMode.value === "dark");
      } catch (e) {
      }
    }
    function updateIframeBox() {
      if (!iframeEl.value)
        return;
      Object.assign(iframeEl.value.style, {
        position: "fixed",
        left: `${box.left}px`,
        top: `${box.top}px`,
        width: `${box.width}px`,
        height: `${box.height}px`,
        outline: "none"
      });
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "anchor",
        ref: anchor,
        "h-full": "",
        "w-full": ""
      }, [
        !unref(iframeLoaded) ? (openBlock(), createElementBlock("div", _hoisted_1, _hoisted_3)) : createCommentVNode("", true)
      ], 512);
    };
  }
});

/* Injected with object hook! */

export { _sfc_main as _ };
