import { _ as _sfc_main$3 } from './Icon.vue_vue_type_script_setup_true_lang-5b8e75b9.js';
import { v as defineComponent, o as openBlock, c as createBlock, q as normalizeClass, aC as isRef, bd as toRaw, a1 as computed, cu as useCopy, r as resolveComponent, e as createElementBlock, i as renderList, z as unref, cv as nanoid, x as createBaseVNode, y as toDisplayString, g as createCommentVNode, F as Fragment, a$ as ref, cw as useNotification, u as createVNode, bG as withModifiers, d as withDirectives, bv as vShow } from './index-55dde797.js';
import { a as isComputed, b as isArray, c as isMap, d as isSet, e as isRegExp, t as toRawType, f as isPlainObject, g as escape } from './index-ef144caa.js';
import { _ as _sfc_main$4 } from './IconButton.vue_vue_type_script_setup_true_lang-1af9c374.js';

const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  __name: "ExpandIcon",
  props: {
    value: { type: Boolean }
  },
  setup(__props) {
    return (_ctx, _cache) => {
      const _component_VDIcon = _sfc_main$3;
      return openBlock(), createBlock(_component_VDIcon, {
        class: normalizeClass(["material-symbols:arrow-right", {
          "transform rotate-90": _ctx.value
        }]),
        "text-5": "",
        "op-50": "",
        "n-transition": ""
      }, null, 8, ["class"]);
    };
  }
});

/* Injected with object hook! */

function getFunctionDetails(func) {
  let string = "";
  let matches = null;
  try {
    string = Function.prototype.toString.call(func);
    matches = String.prototype.match.call(string, /\([\s\S]*?\)/);
  } catch (e) {
  }
  const match = matches && matches[0];
  const args = typeof match === "string" ? match : "(?)";
  const name = typeof func.name === "string" ? func.name : "";
  return `<span style="opacity:.5;">function</span> ${escape(name)}${args}`;
}
function formatWithExtraType(value, type) {
  return `${value} <span style="color:#6b7280;padding:'0 5px';">(${type})</span>`;
}
function formatStateType(value) {
  if (isComputed(value)) {
    const state = formatStateType(value.value);
    return {
      ...state,
      ...state.recursive ? { rawDisplay: formatWithExtraType(state.rawDisplay, "Computed") } : { value: formatWithExtraType(state.value, "Computed") }
    };
  } else if (isRef(value)) {
    const state = formatStateType(toRaw(value.value));
    return {
      ...state,
      ...state.recursive ? { rawDisplay: formatWithExtraType(state.rawDisplay, "Ref") } : { value: formatWithExtraType(state.value, "Ref") }
    };
  } else if (isArray(value)) {
    return {
      rawType: "object",
      rawDisplay: `Array[${value.length}]`,
      recursive: true,
      value
    };
  } else if (typeof value === "function") {
    return {
      rawType: "function",
      recursive: false,
      value: getFunctionDetails(value)
    };
  } else if (typeof value === "bigint") {
    const stringifiedBigInt = BigInt.prototype.toString.call(value);
    return {
      rawType: "string",
      rawDisplay: `BigInt(${stringifiedBigInt})`,
      recursive: false,
      value: stringifiedBigInt
    };
  } else if (Number.isNaN(value)) {
    return {
      rawType: "literal",
      recursive: false,
      value: "NaN"
    };
  } else if (value === Number.POSITIVE_INFINITY) {
    return {
      rawType: "literal",
      recursive: false,
      value: "Infinity"
    };
  } else if (value === Number.NEGATIVE_INFINITY) {
    return {
      rawType: "literal",
      recursive: false,
      value: "-Infinity"
    };
  } else if (typeof value === "symbol") {
    return {
      rawType: "literal",
      recursive: false,
      value: Symbol.prototype.toString.call(value)
    };
  } else if (value === null) {
    return {
      rawType: "null",
      recursive: false,
      value: "null"
    };
  } else if (typeof value === "undefined") {
    return {
      rawType: "null",
      recursive: false,
      value: "undefined"
    };
  } else if (typeof value === "string") {
    return {
      rawType: "string",
      recursive: false,
      value: `"${value}"`
    };
  } else if (value !== "null" && typeof value === "object") {
    if (isMap(value)) {
      return {
        rawType: "object",
        rawDisplay: "Map",
        recursive: true,
        value: Array.from(value.entries()).map(([key, value2]) => ({ key, value: value2 }))
      };
    } else if (isSet(value)) {
      const list = Array.from(value);
      return {
        rawType: "object",
        rawDisplay: `Set[${list.length}]`,
        recursive: true,
        value: list
      };
    } else if (isRegExp(value)) {
      return {
        rawType: "string",
        recursive: false,
        value: RegExp.prototype.toString.call(value)
      };
    } else if (toRawType(value) === "Error") {
      return {
        rawType: "string",
        recursive: false,
        // @ts-expect-error skip
        value: `${value?.message}: ${value?.stack}`
      };
    } else if (value?.state && value._vm || value.constructor?.name === "Store" && value._wrappedGetters) {
      return {
        rawType: "string",
        recursive: false,
        value: '"[object Store]"'
      };
    } else if (value.constructor && value.constructor.name === "VueRouter" || value.currentRoute) {
      return {
        rawType: "string",
        recursive: false,
        value: '"[object Router]"'
      };
    } else if (typeof value.render === "function") {
      return {
        rawType: "object",
        recursive: false,
        // @ts-expect-error skip
        value: formatWithExtraType(value.__name, "Component") ?? "Vue Component"
      };
    } else if (isPlainObject(value)) {
      return {
        rawType: "object",
        rawDisplay: "Object",
        recursive: true,
        value
      };
    } else {
      return {
        rawType: "string",
        recursive: false,
        value: `"${toRawType(value)}"`
      };
    }
  } else {
    return {
      rawType: "literal",
      recursive: false,
      value
    };
  }
}

/* Injected with object hook! */

const _hoisted_1$1 = {
  key: 1,
  "inline-block": "",
  "h-6": "",
  "w-6": ""
};
const _hoisted_2$1 = ["onDblclick"];
const _hoisted_3 = /* @__PURE__ */ createBaseVNode("span", {
  "px-1": "",
  "op-60": ""
}, ":", -1);
const _hoisted_4 = ["onClick", "innerHTML"];
const _hoisted_5 = ["onClick", "innerHTML"];
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "StateFieldsTree",
  props: {
    id: {},
    data: {},
    depth: { default: 0 },
    expandedId: {}
  },
  emits: ["updateExpanded"],
  setup(__props, { emit: emits }) {
    const props = __props;
    const rawTypeStyles = { literal: "raw-literal", string: "raw-string", object: "raw-object", function: "raw-function", null: "raw-null" };
    const list = computed(() => {
      if (Array.isArray(props.data)) {
        return props.data.map((item) => {
          return formatStateType(item);
        });
      } else if (typeof props.data === "object" && props.data !== null) {
        const o = {};
        for (const k in props.data) {
          const key = k;
          o[key] = formatStateType(props.data[k]);
        }
        const sorted = {};
        Object.keys(o).sort().forEach((key) => {
          sorted[key] = o[key];
        });
        return sorted;
      } else {
        return formatStateType("");
      }
    });
    function toggleExpand(id) {
      emits("updateExpanded", id);
    }
    const copy = useCopy();
    return (_ctx, _cache) => {
      const _component_VDExpandIcon = _sfc_main$2;
      const _component_StateFieldsTree = resolveComponent("StateFieldsTree", true);
      return openBlock(true), createElementBlock(Fragment, null, renderList(unref(list), (item, index) => {
        return openBlock(), createElementBlock("code", {
          key: unref(nanoid)(),
          block: "",
          "select-none": "",
          "pl-2": "",
          "text-sm": ""
        }, [
          createBaseVNode("p", {
            flex: "",
            "items-center": "",
            class: normalizeClass([item?.recursive && "cursor-pointer"])
          }, [
            item?.recursive ? (openBlock(), createBlock(_component_VDExpandIcon, {
              key: 0,
              value: _ctx.expandedId.includes(`${_ctx.id}-${_ctx.depth}-${index}`),
              onClick: ($event) => item?.recursive && toggleExpand(`${_ctx.id}-${_ctx.depth}-${index}`)
            }, null, 8, ["value", "onClick"])) : (openBlock(), createElementBlock("i", _hoisted_1$1)),
            createBaseVNode("span", {
              "select-text": "",
              "text-purple-700": "",
              "dark:text-purple-300": "",
              onDblclick: ($event) => unref(copy)(String(index))
            }, toDisplayString(index), 41, _hoisted_2$1),
            _hoisted_3,
            item?.recursive ? (openBlock(), createElementBlock("span", {
              key: 2,
              class: normalizeClass(rawTypeStyles[item.rawType]),
              "max-w": "[75%]",
              truncate: "",
              onClick: ($event) => item?.recursive && toggleExpand(`${_ctx.id}-${_ctx.depth}-${index}`),
              innerHTML: item?.rawDisplay
            }, null, 10, _hoisted_4)) : (openBlock(), createElementBlock("span", {
              key: 3,
              class: normalizeClass(rawTypeStyles[item.rawType]),
              "max-w": "[75%]",
              truncate: "",
              hover: "underline underline-offset-3 cursor-pointer",
              onClick: ($event) => unref(copy)(String(item?.value)),
              innerHTML: item?.value
            }, null, 10, _hoisted_5))
          ], 2),
          _ctx.expandedId.includes(`${_ctx.id}-${_ctx.depth}-${index}`) && item?.recursive ? (openBlock(), createBlock(_component_StateFieldsTree, {
            key: 0,
            id: _ctx.id,
            data: item?.value,
            depth: _ctx.depth + 1,
            "expanded-id": _ctx.expandedId,
            onUpdateExpanded: toggleExpand
          }, null, 8, ["id", "data", "depth", "expanded-id"])) : createCommentVNode("", true)
        ]);
      }), 128);
    };
  }
});

/* Injected with object hook! */

const _hoisted_1 = { "text-primary": "" };
const _hoisted_2 = { "pl-3": "" };
const expandedIdCache = ref([]);
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "StateFields",
  props: {
    data: {},
    id: { default: 0 }
  },
  setup(__props) {
    const isExpanded = ref(true);
    const copy = useCopy();
    const showNotification = useNotification();
    function toggleExpanded() {
      isExpanded.value = !isExpanded.value;
    }
    function updateExpandedIdCache(id) {
      if (expandedIdCache.value.includes(id))
        expandedIdCache.value = expandedIdCache.value.filter((i) => i !== id);
      else
        expandedIdCache.value.push(id);
    }
    function copyContent(value) {
      try {
        copy(JSON.stringify(value));
      } catch (e) {
        showNotification(
          {
            text: e.message,
            type: "error",
            icon: "carbon-close-outline",
            duration: 5e3
          }
        );
      }
    }
    return (_ctx, _cache) => {
      const _component_VDExpandIcon = _sfc_main$2;
      const _component_VDIconButton = _sfc_main$4;
      const _component_StateFieldsTree = _sfc_main$1;
      return openBlock(), createElementBlock("div", null, [
        createBaseVNode("h3", {
          flex: "",
          "cursor-pointer": "",
          "items-center": "",
          "justify-between": "",
          rounded: "",
          "py-1": "",
          class: "hover:bg-[#c2e9d7] hover:dark:bg-[#2c3e50]",
          onClick: toggleExpanded
        }, [
          createBaseVNode("div", null, [
            createVNode(_component_VDExpandIcon, { value: unref(isExpanded) }, null, 8, ["value"]),
            createBaseVNode("span", _hoisted_1, toDisplayString(_ctx.data.key), 1)
          ]),
          createVNode(_component_VDIconButton, {
            mr2: "",
            "flex-none": "",
            title: `Copy ${_ctx.data.key} to clipboard`,
            icon: "carbon-copy",
            onClick: _cache[0] || (_cache[0] = withModifiers(($event) => copyContent(_ctx.data.value), ["stop"]))
          }, null, 8, ["title"])
        ]),
        withDirectives(createBaseVNode("div", _hoisted_2, [
          createVNode(_component_StateFieldsTree, {
            id: _ctx.id,
            data: _ctx.data.value,
            "expanded-id": unref(expandedIdCache),
            onUpdateExpanded: updateExpandedIdCache
          }, null, 8, ["id", "data", "expanded-id"])
        ], 512), [
          [vShow, unref(isExpanded)]
        ])
      ]);
    };
  }
});

/* Injected with object hook! */

export { _sfc_main as _, _sfc_main$2 as a };
