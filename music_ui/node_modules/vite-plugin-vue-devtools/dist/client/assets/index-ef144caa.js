import { aC as isRef } from './index-55dde797.js';

const objectToString = Object.prototype.toString;
function toTypeString(value) {
  return objectToString.call(value);
}
function toRawType(value) {
  return toTypeString(value).slice(8, -1);
}
function isPlainObject(val) {
  return toTypeString(val) === "[object Object]";
}
const isArray = Array.isArray;
function isMap(val) {
  return toTypeString(val) === "[object Map]";
}
function isSet(val) {
  return toTypeString(val) === "[object Set]";
}
function isRegExp(val) {
  return toTypeString(val) === "[object RegExp]";
}
function isComputed(raw) {
  return isRef(raw) && !!raw.effect;
}
const ESC = {
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "&": "&amp;"
};
function escapeChar(a) {
  return ESC[a] || a;
}
function escape(s) {
  return s.replace(/[<>"&]/g, escapeChar);
}
function isMacOS() {
  return navigator?.platform ? navigator?.platform.toLowerCase().includes("mac") : /Macintosh/.test(navigator.userAgent);
}
function checkIsSecurityContext() {
  return !!window.isSecureContext;
}
const pick = (obj, keys) => keys.reduce((pre, cur) => (cur in obj && (pre[cur] = obj[cur]), pre), {});

/* Injected with object hook! */

export { isComputed as a, isArray as b, isMap as c, isSet as d, isRegExp as e, isPlainObject as f, escape as g, checkIsSecurityContext as h, isMacOS as i, pick as p, toRawType as t };
