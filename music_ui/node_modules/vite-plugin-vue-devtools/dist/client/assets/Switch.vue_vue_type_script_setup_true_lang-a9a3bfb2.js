import { _ as _sfc_main$2 } from './Icon.vue_vue_type_script_setup_true_lang-5b8e75b9.js';
import { v as defineComponent, bK as useVModel, o as openBlock, e as createElementBlock, f as renderSlot, d as withDirectives, bt as vModelSelect, z as unref, x as createBaseVNode, y as toDisplayString, g as createCommentVNode, aC as isRef, c as createBlock, bq as vModelCheckbox, bE as withKeys } from './index-55dde797.js';

const _hoisted_1$1 = { class: "n-text-input flex flex items-center border n-border-base rounded px-2 py-1 focus-within:n-focus-base focus-within:border-context n-bg-base" };
const _hoisted_2$1 = ["disabled"];
const _hoisted_3$1 = {
  key: 0,
  value: "",
  disabled: "",
  hidden: ""
};
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "Select",
  props: {
    modelValue: { default: void 0 },
    placeholder: { default: "" },
    icon: { default: "" },
    disabled: { type: Boolean, default: false }
  },
  setup(__props, { emit }) {
    const props = __props;
    const input = useVModel(props, "modelValue", emit, { passive: true });
    return (_ctx, _cache) => {
      const _component_VDIcon = _sfc_main$2;
      return openBlock(), createElementBlock("div", _hoisted_1$1, [
        renderSlot(_ctx.$slots, "icon", {}, () => [
          _ctx.icon ? (openBlock(), createBlock(_component_VDIcon, {
            key: 0,
            icon: _ctx.icon,
            class: "mr-0.4em text-1.1em op50"
          }, null, 8, ["icon"])) : createCommentVNode("", true)
        ]),
        withDirectives(createBaseVNode("select", {
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(input) ? input.value = $event : null),
          disabled: _ctx.disabled,
          class: "w-full flex-auto n-bg-base !outline-none"
        }, [
          _ctx.placeholder ? (openBlock(), createElementBlock("option", _hoisted_3$1, toDisplayString(_ctx.placeholder), 1)) : createCommentVNode("", true),
          renderSlot(_ctx.$slots, "default")
        ], 8, _hoisted_2$1), [
          [vModelSelect, unref(input)]
        ])
      ]);
    };
  }
});

/* Injected with object hook! */

const _hoisted_1 = ["checked", "disabled"];
const _hoisted_2 = ["disabled"];
const _hoisted_3 = /* @__PURE__ */ createBaseVNode("div", { class: "n-switch-slider n-checked:n-switch-slider-checked peer-active:n-active-base peer-focus-visible:n-focus-base n-transition" }, [
  /* @__PURE__ */ createBaseVNode("div", { class: "n-checked:n-switch-thumb-checked n-switch-thumb n-transition" })
], -1);
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Switch",
  props: {
    modelValue: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false }
  },
  setup(__props, { emit }) {
    const props = __props;
    const checked = useVModel(props, "modelValue", emit, { passive: true });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("label", {
        class: "n-switch n-switch-base cursor-pointer n-disabled:n-disabled",
        checked: unref(checked) || null,
        disabled: _ctx.disabled || null
      }, [
        withDirectives(createBaseVNode("input", {
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(checked) ? checked.value = $event : null),
          type: "checkbox",
          class: "peer absolute op0",
          disabled: _ctx.disabled,
          onKeypress: _cache[1] || (_cache[1] = withKeys(($event) => checked.value = !unref(checked), ["enter"]))
        }, null, 40, _hoisted_2), [
          [vModelCheckbox, unref(checked)]
        ]),
        _hoisted_3,
        renderSlot(_ctx.$slots, "default")
      ], 8, _hoisted_1);
    };
  }
});

/* Injected with object hook! */

export { _sfc_main as _, _sfc_main$1 as a };
