import { _ as _sfc_main$1 } from './Icon.vue_vue_type_script_setup_true_lang-5b8e75b9.js';
import { v as defineComponent, bK as useVModel, o as openBlock, e as createElementBlock, f as renderSlot, d as withDirectives, br as vModelDynamic, z as unref, x as createBaseVNode, k as mergeProps, aC as isRef, c as createBlock, g as createCommentVNode } from './index-55dde797.js';

const _hoisted_1 = { class: "n-text-input flex flex items-center border n-border-base rounded py-1 pl-1 pr-2 focus-within:n-focus-base focus-within:border-context n-bg-base" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "TextInput",
  props: {
    modelValue: { default: "" },
    icon: {},
    placeholder: {},
    disabled: { type: Boolean },
    type: { default: "text" }
  },
  setup(__props, { emit }) {
    const props = __props;
    const input = useVModel(props, "modelValue", emit, { passive: true });
    return (_ctx, _cache) => {
      const _component_VDIcon = _sfc_main$1;
      return openBlock(), createElementBlock("div", _hoisted_1, [
        renderSlot(_ctx.$slots, "icon", {}, () => [
          _ctx.icon ? (openBlock(), createBlock(_component_VDIcon, {
            key: 0,
            icon: _ctx.icon,
            class: "ml-0.3em mr-0.1em text-1.1em op50"
          }, null, 8, ["icon"])) : createCommentVNode("", true)
        ]),
        withDirectives(createBaseVNode("input", mergeProps({
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(input) ? input.value = $event : null)
        }, _ctx.$props, { class: "ml-0.4em w-full flex-auto n-bg-base !outline-none" }), null, 16), [
          [vModelDynamic, unref(input)]
        ])
      ]);
    };
  }
});

/* Injected with object hook! */

export { _sfc_main as _ };
